<?php

namespace App\Http\Controllers\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\ChatMessage;
use App\Models\Product;

class ChatBotController extends Controller
{
    public function chat(Request $request)
    {
        $request->validate([
            'message' => 'required|string|max:1000'
        ]);

        $userMessage = $request->input('message');
        $userId = Auth::id();

        // Save user message
        ChatMessage::create([
            'user_id' => $userId,
            'message' => $userMessage,
            'is_bot' => false
        ]);

        // Generate bot response
        $botResponse = $this->generateBotResponse($userMessage);

        // Save bot response
        ChatMessage::create([
            'user_id' => $userId,
            'message' => $botResponse,
            'is_bot' => true
        ]);

        return response()->json([
            'success' => true,
            'response' => $botResponse
        ]);
    }

    public function getChatHistory()
    {
        $userId = Auth::id();
        
        $messages = ChatMessage::where('user_id', $userId)
            ->orderBy('created_at', 'asc')
            ->take(50)
            ->get();

        return response()->json([
            'success' => true,
            'messages' => $messages
        ]);
    }

    private function generateBotResponse($message)
    {
        $message = strtolower($message);

        // Search for books
        if (strpos($message, 't√¨m') !== false || strpos($message, 's√°ch') !== false) {
            $keywords = explode(' ', $message);
            $products = Product::where(function($query) use ($keywords) {
                foreach ($keywords as $keyword) {
                    if (strlen($keyword) > 2) {
                        $query->orWhere('name', 'like', '%' . $keyword . '%')
                              ->orWhere('description', 'like', '%' . $keyword . '%');
                    }
                }
            })->take(3)->get();

            if ($products->count() > 0) {
                $response = "T√¥i t√¨m th·∫•y m·ªôt s·ªë cu·ªën s√°ch ph√π h·ª£p:\n\n";
                foreach ($products as $product) {
                    $response .= "üìö {$product->name}\n";
                    $response .= "üí∞ " . number_format($product->price) . "ƒë\n";
                    $response .= "üîó /products/{$product->id}\n\n";
                }
                return $response;
            }
        }

        // Greetings
        if (strpos($message, 'xin ch√†o') !== false || strpos($message, 'hello') !== false) {
            return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa BookStore. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch, t∆∞ v·∫•n mua h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?";
        }

        // Default responses
        $responses = [
            "T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn t√¨m hi·ªÉu v·ªÅ s√°ch. B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n v·ªÅ th·ªÉ lo·∫°i ho·∫∑c t√™n s√°ch b·∫°n quan t√¢m kh√¥ng?",
            "Ch√∫ng t√¥i c√≥ r·∫•t nhi·ªÅu ƒë·∫ßu s√°ch hay. B·∫°n th√≠ch ƒë·ªçc th·ªÉ lo·∫°i g√¨? Ti·ªÉu thuy·∫øt, k·ªπ nƒÉng s·ªëng, hay s√°ch chuy√™n m√¥n?",
            "ƒê·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n t·ªët h∆°n, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt ng√¢n s√°ch v√† s·ªü th√≠ch ƒë·ªçc c·ªßa b·∫°n kh√¥ng?"
        ];

        return $responses[array_rand($responses)];
    }
}